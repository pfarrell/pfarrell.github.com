---
layout: post
title: "I get it"
---
Sticking with one language deprives you of blissful A-HA moments.

I've been dating several lanaguages for a while... nothing serious.  
I get functional, but keep hearing Haskell's type system is the crown jewel.  
I [glimpsed a shadow](http://en.wikipedia.org/wiki/Allegory_of_the_Cave) in C# today that made me understand how type systems matter.

I've got a TSQL parser, I'm working my way down a form of an abstract syntax tree and wanting to run code based on... you guessed it... type.

Here's the problem:

    class A   {...}
    class B:A {...}
    class C:A {...}

    class D:B {...}
    class E:C {...}


I want to segment functions like this:

    void Process(D d) { do things avabilable and specific to D}
    void Process(E e) { do things avabilable and specific to E}


The API gives me things like this, though

    Continer<A>[] {D, E}



That is, the container is typed as A, but I want to deal with D and E as their most specific types.

I need to execute functions at arbitrary levels in the hierarchy, different object types expose their children and parents in unique patterns, and the class is sealed.

What I need is a way to apply functions to type via some sort of regular expression (I got exposed to aspect-oriented programming early in my career so it may be sullying my mind).

With C#, I can't come up with a great way to do this without some form of an if/else control structure.

This was today's A-HA moment.  

I need control over the way my language is handling the types themselves.  I need access to manipulating my langugage (or extending it) so I can interact with Type in a way they were not originally designed.

When I hear how a type system (or duck typing) solves problems, I never fully _got_ it.  When I have needs that my language almost covers, I need to be able to influence the language.  

Lisp... here I come ;)
